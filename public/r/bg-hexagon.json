{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bg-hexagon",
  "type": "registry:ui",
  "title": "Hexagon Background",
  "description": "An unique interactive hexagon grid background component for modern applications, with customizable colors and patterns.",
  "author": "Ansh Singh Sonkhia",
  "dependencies": [
    "react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "content": "'use client';\r\n \r\nimport * as React from 'react';\r\n \r\nimport { cn } from '@/lib/utils';\r\n \r\ntype HexagonBackgroundProps = React.ComponentProps<'div'> & {\r\n  children?: React.ReactNode;\r\n  hexagonProps?: React.ComponentProps<'div'>;\r\n  hexagonSize?: number; // value greater than 50\r\n  hexagonMargin?: number;\r\n};\r\n \r\nfunction HexagonBackground({\r\n  className,\r\n  children,\r\n  hexagonProps,\r\n  hexagonSize = 75,\r\n  hexagonMargin = 3,\r\n  ...props\r\n}: HexagonBackgroundProps) {\r\n  const hexagonWidth = hexagonSize;\r\n  const hexagonHeight = hexagonSize * 1.1;\r\n  const rowSpacing = hexagonSize * 0.8;\r\n  const baseMarginTop = -36 - 0.275 * (hexagonSize - 100);\r\n  const computedMarginTop = baseMarginTop + hexagonMargin;\r\n  const oddRowMarginLeft = -(hexagonSize / 2);\r\n  const evenRowMarginLeft = hexagonMargin / 2;\r\n \r\n  const [gridDimensions, setGridDimensions] = React.useState({\r\n    rows: 0,\r\n    columns: 0,\r\n  });\r\n \r\n  const updateGridDimensions = React.useCallback(() => {\r\n    const rows = Math.ceil(window.innerHeight / rowSpacing);\r\n    const columns = Math.ceil(window.innerWidth / hexagonWidth) + 1;\r\n    setGridDimensions({ rows, columns });\r\n  }, [rowSpacing, hexagonWidth]);\r\n \r\n  React.useEffect(() => {\r\n    updateGridDimensions();\r\n    window.addEventListener('resize', updateGridDimensions);\r\n    return () => window.removeEventListener('resize', updateGridDimensions);\r\n  }, [updateGridDimensions]);\r\n \r\n  return (\r\n    <div\r\n      data-slot=\"hexagon-background\"\r\n      className={cn(\r\n        'relative size-full overflow-hidden dark:bg-neutral-900 bg-neutral-100',\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      <style>{`:root { --hexagon-margin: ${hexagonMargin}px; }`}</style>\r\n      <div className=\"absolute top-0 -left-0 size-full overflow-hidden\">\r\n        {Array.from({ length: gridDimensions.rows }).map((_, rowIndex) => (\r\n          <div\r\n            key={`row-${rowIndex}`}\r\n            style={{\r\n              marginTop: computedMarginTop,\r\n              marginLeft:\r\n                ((rowIndex + 1) % 2 === 0\r\n                  ? evenRowMarginLeft\r\n                  : oddRowMarginLeft) - 10,\r\n            }}\r\n            className=\"inline-flex\"\r\n          >\r\n            {Array.from({ length: gridDimensions.columns }).map(\r\n              (_, colIndex) => (\r\n                <div\r\n                  key={`hexagon-${rowIndex}-${colIndex}`}\r\n                  {...hexagonProps}\r\n                  style={{\r\n                    width: hexagonWidth,\r\n                    height: hexagonHeight,\r\n                    marginLeft: hexagonMargin,\r\n                    ...hexagonProps?.style,\r\n                  }}\r\n                  className={cn(\r\n                    'relative',\r\n                    '[clip-path:polygon(50%_0%,_100%_25%,_100%_75%,_50%_100%,_0%_75%,_0%_25%)]',\r\n                    \"before:content-[''] before:absolute before:top-0 before:left-0 before:w-full before:h-full dark:before:bg-neutral-950 before:bg-white before:opacity-100 before:transition-all before:duration-1000\",\r\n                    \"after:content-[''] after:absolute after:inset-[var(--hexagon-margin)] dark:after:bg-neutral-950 after:bg-white\",\r\n                    'after:[clip-path:polygon(50%_0%,_100%_25%,_100%_75%,_50%_100%,_0%_75%,_0%_25%)]',\r\n                    'hover:before:bg-neutral-200 dark:hover:before:bg-neutral-800 hover:before:opacity-100 hover:before:duration-0 dark:hover:after:bg-neutral-900 hover:after:bg-neutral-100 hover:after:opacity-100 hover:after:duration-0',\r\n                    hexagonProps?.className,\r\n                  )}\r\n                />\r\n              ),\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n \r\nexport { HexagonBackground, type HexagonBackgroundProps };",
      "path": "components/pumki-ui/backgrounds/bg-hexagon.tsx",
      "target": "components/pumki-ui/backgrounds/bg-hexagon.tsx"
    }
  ]
}