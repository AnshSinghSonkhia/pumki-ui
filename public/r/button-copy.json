{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-copy",
  "type": "registry:ui",
  "title": "Copy Button",
  "description": "A button that copies text to the clipboard with an accompanying animation.",
  "author": "Ansh Singh Sonkhia",
  "dependencies": [
    "react",
    "motion",
    "lucide-react",
    "class-variance-authority"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "content": "'use client';\r\n \r\nimport * as React from 'react';\r\nimport { AnimatePresence, HTMLMotionProps, motion } from 'motion/react';\r\nimport { CheckIcon, CopyIcon } from 'lucide-react';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\n \r\nimport { cn } from '@/lib/utils';\r\n \r\nconst buttonVariants = cva(\r\n  'inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\r\n        muted: 'bg-muted text-muted-foreground',\r\n        destructive:\r\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n        outline:\r\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\r\n        secondary:\r\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\r\n        ghost:\r\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\r\n      },\r\n      size: {\r\n        default: 'size-8 rounded-lg [&_svg]:size-4',\r\n        sm: 'size-6 [&_svg]:size-3',\r\n        md: 'size-10 rounded-lg [&_svg]:size-5',\r\n        lg: 'size-12 rounded-xl [&_svg]:size-6',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  },\r\n);\r\n \r\ntype CopyButtonProps = Omit<HTMLMotionProps<'button'>, 'children' | 'onCopy'> &\r\n  VariantProps<typeof buttonVariants> & {\r\n    content?: string;\r\n    delay?: number;\r\n    onCopy?: (content: string) => void;\r\n    isCopied?: boolean;\r\n    onCopyChange?: (isCopied: boolean) => void;\r\n  };\r\n \r\nfunction CopyButton({\r\n  content,\r\n  className,\r\n  size,\r\n  variant,\r\n  delay = 3000,\r\n  onClick,\r\n  onCopy,\r\n  isCopied,\r\n  onCopyChange,\r\n  ...props\r\n}: CopyButtonProps) {\r\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\r\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\r\n \r\n  React.useEffect(() => {\r\n    setLocalIsCopied(isCopied ?? false);\r\n  }, [isCopied]);\r\n \r\n  const handleIsCopied = React.useCallback(\r\n    (isCopied: boolean) => {\r\n      setLocalIsCopied(isCopied);\r\n      onCopyChange?.(isCopied);\r\n    },\r\n    [onCopyChange],\r\n  );\r\n \r\n  const handleCopy = React.useCallback(\r\n    (e: React.MouseEvent<HTMLButtonElement>) => {\r\n      if (isCopied) return;\r\n      if (content) {\r\n        navigator.clipboard\r\n          .writeText(content)\r\n          .then(() => {\r\n            handleIsCopied(true);\r\n            setTimeout(() => handleIsCopied(false), delay);\r\n            onCopy?.(content);\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error copying command', error);\r\n          });\r\n      }\r\n      onClick?.(e);\r\n    },\r\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\r\n  );\r\n \r\n  return (\r\n    <motion.button\r\n      data-slot=\"copy-button\"\r\n      whileHover={{ scale: 1.05 }}\r\n      whileTap={{ scale: 0.95 }}\r\n      className={cn(buttonVariants({ variant, size }), className)}\r\n      onClick={handleCopy}\r\n      {...props}\r\n    >\r\n      <AnimatePresence mode=\"wait\">\r\n        <motion.span\r\n          key={localIsCopied ? 'check' : 'copy'}\r\n          data-slot=\"copy-button-icon\"\r\n          initial={{ scale: 0 }}\r\n          animate={{ scale: 1 }}\r\n          exit={{ scale: 0 }}\r\n          transition={{ duration: 0.15 }}\r\n        >\r\n          <Icon />\r\n        </motion.span>\r\n      </AnimatePresence>\r\n    </motion.button>\r\n  );\r\n}\r\n \r\nexport { CopyButton, buttonVariants, type CopyButtonProps };",
      "path": "components/pumki-ui/buttons/copy.tsx",
      "target": "components/pumki-ui/buttons/copy.tsx"
    }
  ]
}