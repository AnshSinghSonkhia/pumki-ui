{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bg-potion",
  "type": "registry:ui",
  "title": "Magical Potion Background",
  "description": "Immersive liquid potion background effect perfect for fantasy games, magical applications, or any project that needs an enchanting animated background.",
  "author": "Ansh Singh Sonkhia",
  "dependencies": [
    "react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\ninterface PotionBackgroundProps {\r\n  // Particle configuration\r\n  glitterCount?: {\r\n    mobile?: number;\r\n    desktop?: number;\r\n  };\r\n  sparkCount?: {\r\n    mobile?: number;\r\n    desktop?: number;\r\n  };\r\n  \r\n  // Color configuration\r\n  colors?: {\r\n    gradient?: string[];\r\n    glitterParticle?: {\r\n      inner?: string;\r\n      middle?: string;\r\n      outer?: string;\r\n    };\r\n    sparkParticle?: {\r\n      inner?: string;\r\n      middle?: string;\r\n      outer?: string;\r\n    };\r\n    highlights?: {\r\n      primary?: string;\r\n      secondary?: string;\r\n      accent?: string;\r\n    };\r\n  };\r\n  \r\n  // Animation configuration\r\n  animations?: {\r\n    liquidShiftDuration?: number; // seconds\r\n    surfaceRippleDuration?: number; // seconds\r\n    shimmerSweepDuration?: number; // seconds\r\n    particleFloatDuration?: {\r\n      min?: number;\r\n      max?: number;\r\n    };\r\n  };\r\n  \r\n  // Particle configuration\r\n  particleConfig?: {\r\n    glitterSize?: number; // px\r\n    sparkSize?: number; // px\r\n    opacity?: {\r\n      min?: number;\r\n      max?: number;\r\n    };\r\n  };\r\n  \r\n  // Feature toggles\r\n  features?: {\r\n    showGlitter?: boolean;\r\n    showSparks?: boolean;\r\n    showSurfaceHighlights?: boolean;\r\n    showShimmer?: boolean;\r\n  };\r\n  \r\n  // Custom CSS class\r\n  className?: string;\r\n}\r\n\r\nexport const PotionBackground: React.FC<PotionBackgroundProps> = ({\r\n  glitterCount = { mobile: 250, desktop: 500 },\r\n  sparkCount = { mobile: 200, desktop: 350 },\r\n  colors = {},\r\n  animations = {},\r\n  particleConfig = {},\r\n  features = {},\r\n  className = '',\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Default color values\r\n  const defaultColors = {\r\n    gradient: [\r\n      '#faf398', // 0%\r\n      '#f9f295', // 15%\r\n      '#e0aa3e', // 40%\r\n      '#b88a44', // 70%\r\n      '#8b6f47', // 100%\r\n    ],\r\n    glitterParticle: {\r\n      inner: '#ffffff',\r\n      middle: '#faf398',\r\n      outer: '#e0aa3e',\r\n    },\r\n    sparkParticle: {\r\n      inner: '#fff',\r\n      middle: 'rgba(255, 255, 255, 0.9)',\r\n      outer: 'rgba(224, 170, 62, 0.9)',\r\n    },\r\n    highlights: {\r\n      primary: 'rgba(255, 255, 255, 0.1)',\r\n      secondary: 'rgba(255, 255, 255, 0.15)',\r\n      accent: 'rgba(212, 175, 55, 0.1)',\r\n    },\r\n  };\r\n\r\n  // Merge user colors with defaults\r\n  const finalColors = {\r\n    gradient: colors.gradient || defaultColors.gradient,\r\n    glitterParticle: { ...defaultColors.glitterParticle, ...colors.glitterParticle },\r\n    sparkParticle: { ...defaultColors.sparkParticle, ...colors.sparkParticle },\r\n    highlights: { ...defaultColors.highlights, ...colors.highlights },\r\n  };\r\n\r\n  // Default animation values\r\n  const defaultAnimations = {\r\n    liquidShiftDuration: 8,\r\n    surfaceRippleDuration: 6,\r\n    shimmerSweepDuration: 10,\r\n    particleFloatDuration: { min: 3, max: 7 },\r\n  };\r\n\r\n  const finalAnimations = { ...defaultAnimations, ...animations };\r\n  if (animations.particleFloatDuration) {\r\n    finalAnimations.particleFloatDuration = { \r\n      ...defaultAnimations.particleFloatDuration, \r\n      ...animations.particleFloatDuration \r\n    };\r\n  }\r\n\r\n  // Default particle config\r\n  const defaultParticleConfig = {\r\n    glitterSize: 4,\r\n    sparkSize: 2,\r\n    opacity: { min: 0.5, max: 1.0 },\r\n  };\r\n\r\n  const finalParticleConfig = { ...defaultParticleConfig, ...particleConfig };\r\n  finalParticleConfig.opacity = {\r\n    ...defaultParticleConfig.opacity,\r\n    ...(particleConfig.opacity || {}),\r\n  };\r\n\r\n  // Default features\r\n  const defaultFeatures = {\r\n    showGlitter: true,\r\n    showSparks: true,\r\n    showSurfaceHighlights: true,\r\n    showShimmer: true,\r\n  };\r\n\r\n  const finalFeatures = { ...defaultFeatures, ...features };\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    if (!container) return;\r\n\r\n    const prefersReducedMotion = \r\n      typeof window !== 'undefined' && \r\n      window.matchMedia?.('(prefers-reduced-motion: reduce)').matches;\r\n    \r\n    if (prefersReducedMotion) return;\r\n\r\n    const isMobile = \r\n      typeof window !== 'undefined' && \r\n      (window.matchMedia?.('(max-width: 768px)').matches || \r\n       ('ontouchstart' in window && navigator.maxTouchPoints > 0));\r\n\r\n    const finalGlitterCount = isMobile ? glitterCount.mobile! : glitterCount.desktop!;\r\n    const finalSparkCount = isMobile ? sparkCount.mobile! : sparkCount.desktop!;\r\n\r\n    // Create glitter particles\r\n    if (finalFeatures.showGlitter) {\r\n      for (let i = 0; i < finalGlitterCount; i++) {\r\n        const glitter = document.createElement('div');\r\n        glitter.className = 'glitter-particle';\r\n        glitter.style.cssText = `\r\n          position: absolute;\r\n          width: ${finalParticleConfig.glitterSize}px;\r\n          height: ${finalParticleConfig.glitterSize}px;\r\n          border-radius: 50%;\r\n          background: radial-gradient(circle at 30% 30%, ${finalColors.glitterParticle.inner} 0%, ${finalColors.glitterParticle.middle} 40%, ${finalColors.glitterParticle.outer} 100%);\r\n          box-shadow: 0 0 8px rgba(224, 170, 62, 0.8);\r\n          pointer-events: none;\r\n          left: ${Math.random() * 100}%;\r\n          top: ${Math.random() * 100}%;\r\n          animation: floatUp ${(finalAnimations.particleFloatDuration.min ?? 3) + Math.random() * ((finalAnimations.particleFloatDuration.max ?? 7) - (finalAnimations.particleFloatDuration.min ?? 3))}s ease-in-out infinite;\r\n          animation-delay: ${Math.random() * 5}s;\r\n          opacity: ${(finalParticleConfig.opacity.min ?? 0.5) + Math.random() * ((finalParticleConfig.opacity.max ?? 1.0) - (finalParticleConfig.opacity.min ?? 0.5))};\r\n          z-index: 1;\r\n        `;\r\n        container.appendChild(glitter);\r\n      }\r\n    }\r\n\r\n    // Create spark particles\r\n    if (finalFeatures.showSparks) {\r\n      for (let i = 0; i < finalSparkCount; i++) {\r\n        const spark = document.createElement('div');\r\n        spark.className = 'spark-particle';\r\n        spark.style.cssText = `\r\n          position: absolute;\r\n          width: ${finalParticleConfig.sparkSize}px;\r\n          height: ${finalParticleConfig.sparkSize}px;\r\n          border-radius: 50%;\r\n          background: radial-gradient(circle at 40% 40%, ${finalColors.sparkParticle.inner} 0%, ${finalColors.sparkParticle.middle} 50%, ${finalColors.sparkParticle.outer} 100%);\r\n          box-shadow: 0 0 6px rgba(224, 170, 62, 0.7);\r\n          pointer-events: none;\r\n          left: ${Math.random() * 100}%;\r\n          top: ${Math.random() * 100}%;\r\n          animation: sparkleFloat ${(finalAnimations.particleFloatDuration.min ?? 3) - 0.5 + Math.random() * ((finalAnimations.particleFloatDuration.max ?? 7) - (finalAnimations.particleFloatDuration.min ?? 3))}s ease-in-out infinite;\r\n          animation-delay: ${Math.random() * 4}s;\r\n          opacity: ${(finalParticleConfig.opacity.min ?? 0.5) + Math.random() * ((finalParticleConfig.opacity.max ?? 1.0) - (finalParticleConfig.opacity.min ?? 0.5))};\r\n          z-index: 1;\r\n        `;\r\n        container.appendChild(spark);\r\n      }\r\n    }\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      const particles = container.querySelectorAll('.glitter-particle, .spark-particle');\r\n      particles.forEach(particle => particle.remove());\r\n    };\r\n  }, [glitterCount, sparkCount, finalColors, finalAnimations, finalParticleConfig, finalFeatures]);\r\n\r\n  const gradientBackground = `linear-gradient(180deg, ${finalColors.gradient.map((color, index) => {\r\n    const stops = [0, 15, 40, 70, 100];\r\n    return `${color} ${stops[index] || index * 25}%`;\r\n  }).join(', ')})`;\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={`relative w-full h-full overflow-hidden ${className}`}\r\n      style={{\r\n        background: `\r\n          ${gradientBackground},\r\n          radial-gradient(ellipse at 30% 20%, ${finalColors.highlights.primary} 0%, transparent 50%),\r\n          radial-gradient(ellipse at 70% 80%, rgba(224, 170, 62, 0.2) 0%, transparent 40%)\r\n        `,\r\n        backgroundSize: '100% 100%, 200% 200%, 300% 300%',\r\n        animation: `liquidShift ${finalAnimations.liquidShiftDuration}s ease-in-out infinite`,\r\n      }}\r\n    >\r\n      {/* Liquid surface highlights */}\r\n      {finalFeatures.showSurfaceHighlights && (\r\n        <div\r\n          className=\"absolute inset-0\"\r\n          style={{\r\n            background: `\r\n              radial-gradient(ellipse 60% 30% at 20% 30%, ${finalColors.highlights.secondary} 0%, transparent 70%),\r\n              radial-gradient(ellipse 40% 20% at 80% 60%, ${finalColors.highlights.primary} 0%, transparent 60%),\r\n              radial-gradient(ellipse 70% 40% at 50% 20%, ${finalColors.highlights.accent} 0%, transparent 50%)\r\n            `,\r\n            animation: `surfaceRipple ${finalAnimations.surfaceRippleDuration}s ease-in-out infinite`,\r\n            opacity: 0.8,\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {/* Subtle shimmer overlay */}\r\n      {finalFeatures.showShimmer && (\r\n        <div\r\n          className=\"absolute inset-0\"\r\n          style={{\r\n            background: `linear-gradient(\r\n              45deg,\r\n              transparent 40%,\r\n              rgba(255, 255, 255, 0.05) 50%,\r\n              transparent 60%\r\n            )`,\r\n            backgroundSize: '200% 200%',\r\n            animation: `shimmerSweep ${finalAnimations.shimmerSweepDuration}s ease-in-out infinite`,\r\n            opacity: 0.6,\r\n          }}\r\n        />\r\n      )}\r\n\r\n      <style jsx>{`\r\n        @keyframes liquidShift {\r\n          0%, 100% {\r\n            background-position: 0% 0%, 0% 0%, 0% 0%;\r\n          }\r\n          33% {\r\n            background-position: 0% 0%, 20% 30%, 30% 20%;\r\n          }\r\n          66% {\r\n            background-position: 0% 0%, -10% 50%, 50% 60%;\r\n          }\r\n        }\r\n\r\n        @keyframes surfaceRipple {\r\n          0%, 100% {\r\n            transform: scale(1) translate(0, 0);\r\n            opacity: 0.8;\r\n          }\r\n          25% {\r\n            transform: scale(1.02) translate(2%, -1%);\r\n            opacity: 0.6;\r\n          }\r\n          50% {\r\n            transform: scale(0.98) translate(-1%, 2%);\r\n            opacity: 0.9;\r\n          }\r\n          75% {\r\n            transform: scale(1.01) translate(-2%, -1%);\r\n            opacity: 0.7;\r\n          }\r\n        }\r\n\r\n        @keyframes shimmerSweep {\r\n          0% {\r\n            background-position: -200% -200%;\r\n          }\r\n          50% {\r\n            background-position: 200% 200%;\r\n          }\r\n          100% {\r\n            background-position: -200% -200%;\r\n          }\r\n        }\r\n\r\n        @keyframes floatUp {\r\n          0% {\r\n            transform: translateY(0px) scale(0.8);\r\n            opacity: 0.6;\r\n          }\r\n          50% {\r\n            opacity: 1;\r\n          }\r\n          100% {\r\n            transform: translateY(-100vh) scale(1.2);\r\n            opacity: 0;\r\n          }\r\n        }\r\n\r\n        @keyframes sparkleFloat {\r\n          0% {\r\n            transform: translateY(0px) rotate(0deg) scale(0.6);\r\n            opacity: 0.5;\r\n          }\r\n          30% {\r\n            opacity: 1;\r\n          }\r\n          100% {\r\n            transform: translateY(-100vh) rotate(180deg) scale(1);\r\n            opacity: 0;\r\n          }\r\n        }\r\n\r\n        @media (prefers-reduced-motion: reduce) {\r\n          * {\r\n            animation: none !important;\r\n          }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};",
      "path": "components/pumki-ui/backgrounds/bg-potion.tsx",
      "target": "components/pumki-ui/backgrounds/bg-potion.tsx"
    }
  ]
}