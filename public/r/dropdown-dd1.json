{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown-dd1",
  "type": "registry:ui",
  "title": "Dropdown 1",
  "description": "A simple animated dropdown component.",
  "author": "Ansh Singh Sonkhia",
  "dependencies": [
    "react",
    "framer-motion",
    "motion",
    "@radix-ui/react-dropdown-menu",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://raw.githubusercontent.com/AnshSinghSonkhia/pumki-ui/main/public/r/button-simple.json"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuTrigger,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuLabel,\r\n} from \"@radix-ui/react-dropdown-menu\";\r\nimport { ChevronDown } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { SimpleButton } from \"@/components/pumki-ui/buttons/simple\";\r\n\r\nexport interface MenuItem {\r\n  title: string;\r\n  description: string;\r\n  icon: React.ReactNode;\r\n}\r\n\r\ninterface DropdownProps {\r\n  menuItems?: MenuItem[];\r\n  triggerText?: string;\r\n  menuTitle?: string;\r\n  onSelect?: (title: string) => void;\r\n  maxHeight?: string | number;\r\n  buttonVariant?:\r\n    | \"default\"\r\n    | \"destructive\"\r\n    | \"outline\"\r\n    | \"secondary\"\r\n    | \"ghost\"\r\n    | \"link\"\r\n    | \"success\"\r\n    | \"warning\"\r\n    | \"info\"\r\n    | \"dark\"\r\n    | \"light\"\r\n    | \"gradient\"\r\n    | \"glass\";\r\n  buttonSize?: \"default\" | \"sm\" | \"lg\" | \"icon\";\r\n}\r\n\r\nconst Dropdown1: React.FC<DropdownProps> = ({\r\n  menuItems = [],\r\n  triggerText = \"Menu\",\r\n  menuTitle = \"Menu Options\",\r\n  onSelect,\r\n  maxHeight = \"16rem\",\r\n  buttonVariant = \"default\",\r\n  buttonSize = \"default\",\r\n}) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const checkIfMobile = () => {\r\n      setIsMobile(\r\n        window.innerWidth < 768 ||\r\n          /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n            navigator.userAgent\r\n          )\r\n      );\r\n    };\r\n\r\n    checkIfMobile();\r\n    window.addEventListener(\"resize\", checkIfMobile);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", checkIfMobile);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        dropdownRef.current &&\r\n        !dropdownRef.current.contains(event.target as Node)\r\n      ) {\r\n        setOpen(false);\r\n      }\r\n    };\r\n\r\n    if (open) {\r\n      document.addEventListener(\"mousedown\", handleClickOutside);\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [open]);\r\n\r\n  const handleSelect = (title: string) => {\r\n    if (onSelect) onSelect(title);\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div ref={dropdownRef}>\r\n      <DropdownMenu open={open} onOpenChange={setOpen}>\r\n        <DropdownMenuTrigger asChild>\r\n          <SimpleButton\r\n            variant={buttonVariant}\r\n            size={buttonSize}\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            <span>{triggerText}</span>\r\n            <motion.span\r\n              animate={{ rotate: open ? 180 : 0 }}\r\n              transition={{ duration: 0.2 }}\r\n            >\r\n              <ChevronDown className=\"w-4 h-4\" />\r\n            </motion.span>\r\n          </SimpleButton>\r\n        </DropdownMenuTrigger>\r\n\r\n        <AnimatePresence>\r\n          {open && (\r\n            <DropdownMenuContent forceMount asChild sideOffset={5}>\r\n              <motion.div\r\n                initial={{\r\n                  opacity: 0,\r\n                  scale: 0.5,\r\n                  rotateX: 40,\r\n                  y: 20,\r\n                }}\r\n                animate={{\r\n                  opacity: 1,\r\n                  y: 0,\r\n                  scale: 1,\r\n                  rotateX: 0,\r\n                  transition: {\r\n                    type: \"spring\",\r\n                    stiffness: 260,\r\n                    damping: 15,\r\n                  },\r\n                }}\r\n                exit={{\r\n                  opacity: 0,\r\n                  scale: 0.8,\r\n                  rotateX: 10,\r\n                  y: 10,\r\n                  transition: { duration: 0.2 },\r\n                }}\r\n                className={cn(\r\n                  \"w-72 rounded-xl border shadow-xl z-50 overflow-hidden [perspective:800px] [transform-style:preserve-3d]\",\r\n                  \"bg-white/80 border-neutral-900/10\",\r\n                  \"dark:bg-neutral-900/80 dark:border-neutral-50/10\"\r\n                )}\r\n                style={{ transformOrigin: \"top\" }}\r\n              >\r\n                <div\r\n                  className={cn(\r\n                    \"absolute inset-0 z-0\",\r\n                    \"bg-gradient-to-br from-indigo-500/10 to-purple-500/10\",\r\n                    \"dark:from-indigo-500/20 dark:to-purple-500/20\"\r\n                  )}\r\n                ></div>\r\n\r\n                <div className=\"absolute inset-0 backdrop-blur-sm z-10\"></div>\r\n\r\n                <div className=\"p-2 sticky top-0 z-20\">\r\n                  <DropdownMenuLabel\r\n                    className={cn(\r\n                      \"px-3 py-2 font-bold\",\r\n                      \"text-neutral-900\",\r\n                      \"dark:text-neutral-50\"\r\n                    )}\r\n                  >\r\n                    {menuTitle}\r\n                  </DropdownMenuLabel>\r\n\r\n                  <DropdownMenuSeparator\r\n                    className={cn(\r\n                      \"my-1 h-px\",\r\n                      \"bg-neutral-900/10\",\r\n                      \"dark:bg-white/10\"\r\n                    )}\r\n                  />\r\n                </div>\r\n\r\n                <div\r\n                  className=\"relative z-20 overflow-y-auto scrollbar-visible\"\r\n                  style={{\r\n                    maxHeight:\r\n                      typeof maxHeight === \"number\"\r\n                        ? `${maxHeight}px`\r\n                        : maxHeight,\r\n                    scrollbarWidth: \"thin\",\r\n                    scrollbarColor: \"rgba(155, 155, 155, 0.5) transparent\",\r\n                  }}\r\n                >\r\n                  <style jsx global>{`\r\n                    .scrollbar-visible::-webkit-scrollbar {\r\n                      width: 6px;\r\n                      display: block;\r\n                    }\r\n                    .scrollbar-visible::-webkit-scrollbar-track {\r\n                      background: transparent;\r\n                    }\r\n                    .scrollbar-visible::-webkit-scrollbar-thumb {\r\n                      background-color: rgba(155, 155, 155, 0.5);\r\n                      border-radius: 20px;\r\n                    }\r\n                    .scrollbar-visible::-webkit-scrollbar-thumb:hover {\r\n                      background-color: rgba(155, 155, 155, 0.7);\r\n                    }\r\n                  `}</style>\r\n                  {menuItems && menuItems.length > 0 ? (\r\n                    menuItems.map((item, idx) => (\r\n                      <DropdownMenuItem\r\n                        key={idx}\r\n                        className=\"focus:outline-none focus:bg-transparent\"\r\n                        onMouseEnter={\r\n                          !isMobile ? () => setHoveredIndex(idx) : undefined\r\n                        }\r\n                        onMouseLeave={\r\n                          !isMobile ? () => setHoveredIndex(null) : undefined\r\n                        }\r\n                        asChild\r\n                      >\r\n                        <motion.div\r\n                          className=\"relative rounded-lg overflow-hidden\"\r\n                          initial={{ opacity: 0, x: -20 }}\r\n                          animate={{\r\n                            opacity: 1,\r\n                            x: 0,\r\n                            transition: {\r\n                              delay: idx * 0.05,\r\n                              duration: 0.2,\r\n                            },\r\n                          }}\r\n                        >\r\n                          <AnimatePresence>\r\n                            {!isMobile && hoveredIndex === idx && (\r\n                              <motion.div\r\n                                layoutId=\"hoverBackground\"\r\n                                initial={{ opacity: 0 }}\r\n                                animate={{\r\n                                  opacity: 1,\r\n                                  scale: 1.05,\r\n                                  transition: {\r\n                                    type: \"spring\",\r\n                                    stiffness: 260,\r\n                                    damping: 15,\r\n                                  },\r\n                                }}\r\n                                exit={{ opacity: 0 }}\r\n                                className={cn(\r\n                                  \"absolute inset-0 rounded-lg\",\r\n                                  \"bg-gradient-to-r from-indigo-500/10 to-purple-500/10\",\r\n                                  \"dark:from-indigo-500/20 dark:to-purple-500/20\"\r\n                                )}\r\n                              />\r\n                            )}\r\n                          </AnimatePresence>\r\n                          <button\r\n                            className={cn(\r\n                              \"flex items-center w-full p-2 rounded-lg relative z-20 text-left gap-3\",\r\n                              \"text-neutral-900\",\r\n                              \"dark:text-neutral-50\"\r\n                            )}\r\n                            onClick={() => handleSelect(item.title)}\r\n                          >\r\n                            <motion.div\r\n                              animate={{\r\n                                scale:\r\n                                  !isMobile && hoveredIndex === idx ? 1.1 : 1,\r\n                                rotate:\r\n                                  !isMobile && hoveredIndex === idx ? 5 : 0,\r\n                              }}\r\n                              transition={{ type: \"spring\", stiffness: 500 }}\r\n                            >\r\n                              {item.icon}\r\n                            </motion.div>\r\n                            <div className=\"flex flex-col items-start\">\r\n                              <motion.span\r\n                                animate={{\r\n                                  y: !isMobile && hoveredIndex === idx ? -2 : 0,\r\n                                  x: !isMobile && hoveredIndex === idx ? 2 : 0,\r\n                                }}\r\n                                className={cn(\r\n                                  \"font-semibold\",\r\n                                  \"text-neutral-900\",\r\n                                  \"dark:text-neutral-50\"\r\n                                )}\r\n                              >\r\n                                {item.title}\r\n                              </motion.span>\r\n                              <motion.span\r\n                                animate={{\r\n                                  y: !isMobile && hoveredIndex === idx ? 2 : 0,\r\n                                  x: !isMobile && hoveredIndex === idx ? 2 : 0,\r\n                                  opacity:\r\n                                    !isMobile && hoveredIndex === idx ? 1 : 0.7,\r\n                                }}\r\n                                className={cn(\r\n                                  \"text-xs\",\r\n                                  \"text-neutral-700\",\r\n                                  \"dark:text-neutral-300\"\r\n                                )}\r\n                              >\r\n                                {item.description}\r\n                              </motion.span>\r\n                            </div>\r\n                          </button>\r\n                        </motion.div>\r\n                      </DropdownMenuItem>\r\n                    ))\r\n                  ) : (\r\n                    <div\r\n                      className={cn(\r\n                        \"p-3 text-center\",\r\n                        \"text-neutral-900\",\r\n                        \"dark:text-neutral-50\"\r\n                      )}\r\n                    >\r\n                      No menu items available\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </motion.div>\r\n            </DropdownMenuContent>\r\n          )}\r\n        </AnimatePresence>\r\n      </DropdownMenu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropdown1;\r\n",
      "path": "components/pumki-ui/dropdown/dd1.tsx",
      "target": "components/pumki-ui/dropdown/dd1.tsx"
    }
  ]
}