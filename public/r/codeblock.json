{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "codeblock",
  "type": "registry:ui",
  "title": "Code Block",
  "description": "A customizable code preview component for displaying code snippets with syntax highlighting.",
  "author": "Ansh Singh Sonkhia",
  "dependencies": [
    "react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\"\r\n\r\nimport React from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface CodeBlockProps {\r\n  children: string;\r\n  language?: string;\r\n  filename?: string;\r\n  highlight?: string; // e.g., \"6\" or \"1,4-6\" or \"1-3,5\" for lines, or \"/text/\" for substring\r\n  copy?: boolean;\r\n  showLineNumbers?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport const CodeBlock: React.FC<CodeBlockProps> = ({\r\n  children,\r\n  language = 'text',\r\n  filename,\r\n  highlight,\r\n  copy = true,\r\n  showLineNumbers = true,\r\n  className\r\n}) => {\r\n  const [copied, setCopied] = React.useState(false);\r\n  \r\n  const copyToClipboard = async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(children);\r\n      setCopied(true);\r\n      setTimeout(() => setCopied(false), 2000);\r\n    } catch (err) {\r\n      console.error('Failed to copy text: ', err);\r\n    }\r\n  };\r\n\r\n  // Parse highlight string to get highlighted line numbers or substring\r\n  const parseHighlight = (highlightStr: string): { lines: number[], substring: string | null } => {\r\n    if (!highlightStr) return { lines: [], substring: null };\r\n    \r\n    // Check if it's substring highlighting (starts and ends with /)\r\n    if (highlightStr.startsWith('/') && highlightStr.endsWith('/')) {\r\n      return { lines: [], substring: highlightStr.slice(1, -1) };\r\n    }\r\n    \r\n    // Line-based highlighting\r\n    const parts = highlightStr.split(',');\r\n    const lines: number[] = [];\r\n    \r\n    parts.forEach(part => {\r\n      const trimmed = part.trim();\r\n      if (trimmed.includes('-')) {\r\n        const [start, end] = trimmed.split('-').map(Number);\r\n        for (let i = start; i <= end; i++) {\r\n          lines.push(i);\r\n        }\r\n      } else {\r\n        lines.push(Number(trimmed));\r\n      }\r\n    });\r\n    \r\n    return { lines, substring: null };\r\n  };\r\n\r\n  const { lines: highlightedLines, substring: highlightSubstring } = parseHighlight(highlight || '');\r\n  const lines = children.trim().split('\\n');\r\n\r\n  // Simple syntax highlighting for common languages\r\n  const highlightSyntax = (code: string, lang: string): string => {\r\n    // First escape HTML\r\n    let result = code\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/\"/g, '&quot;')\r\n      .replace(/'/g, '&#039;');\r\n    \r\n    // If there's a substring to highlight, wrap it with a span\r\n    if (highlightSubstring) {\r\n      const regex = new RegExp(`(${highlightSubstring.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\r\n      result = result.replace(regex, '<span class=\"bg-yellow-200 text-yellow-900 dark:bg-pink-500/30 dark:text-white font-medium px-1 rounded\">$1</span>');\r\n    }\r\n    \r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"relative rounded-lg border border-border bg-muted/50 overflow-hidden\", className)}>\r\n      {/* Header - only show if filename exists */}\r\n      {filename && (\r\n        <div className=\"flex items-center justify-between px-4 py-2 bg-muted/80 border-b border-border\">\r\n          <div className=\"flex items-center gap-0.5\">\r\n            \r\n            {/* <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\r\n            <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\r\n            <div className=\"w-3 h-3 rounded-full bg-green-500\"></div> */}\r\n            <span className=\"ml-1 text-sm font-medium text-muted-foreground\">{filename}</span>\r\n            <img \r\n              src=\"/icon-no-bg.png\" \r\n              alt=\"Pumki UI\" \r\n              className=\"ml-2 w-6 h-6\"\r\n            />\r\n          </div>\r\n          {copy && (\r\n            <button\r\n              onClick={copyToClipboard}\r\n              className=\"p-1.5 rounded-md hover:bg-background/50 transition-colors text-muted-foreground hover:text-foreground\"\r\n              title=\"Copy to clipboard\"\r\n            >\r\n              {copied ? (\r\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n                </svg>\r\n              ) : (\r\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\" />\r\n                </svg>\r\n              )}\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n      \r\n      {/* Floating copy button - only show when no filename and copy is enabled */}\r\n      {!filename && copy && (\r\n        <button\r\n          onClick={copyToClipboard}\r\n          className=\"absolute top-2 right-2 z-10 p-1.5 rounded-md bg-background/80 hover:bg-background border border-border transition-colors text-muted-foreground hover:text-foreground shadow-sm\"\r\n          title=\"Copy to clipboard\"\r\n        >\r\n          {copied ? (\r\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n            </svg>\r\n          ) : (\r\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\" />\r\n            </svg>\r\n          )}\r\n        </button>\r\n      )}\r\n      \r\n      {/* Code Content */}\r\n      <div className=\"relative\">\r\n        <pre className=\"overflow-x-auto p-4 text-sm\">\r\n          <code className=\"font-mono\">\r\n            {lines.map((line, index) => {\r\n              const lineNumber = index + 1;\r\n              const isHighlighted = highlightedLines.includes(lineNumber);\r\n              \r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className={cn(\r\n                    \"flex\",\r\n                    isHighlighted && \"bg-primary/10 border-l-2 border-primary -ml-4 pl-3 mr-[-1rem] pr-4\"\r\n                  )}\r\n                >\r\n                  {showLineNumbers && (\r\n                    <span className=\"select-none text-muted-foreground/60 mr-4 min-w-[2rem] text-right\">\r\n                      {lineNumber}\r\n                    </span>\r\n                  )}\r\n                  <span\r\n                    className=\"flex-1\"\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: highlightSyntax(line || ' ', language)\r\n                    }}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </code>\r\n        </pre>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",
      "path": "components/docs/code-block.tsx",
      "target": "components/pumki-ui/codeblock.tsx"
    }
  ]
}