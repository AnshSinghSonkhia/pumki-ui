{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-splitting",
  "type": "registry:ui",
  "title": "Text Splitting",
  "description": "A component that applies a splitting effect to text with a smooth animation.",
  "author": "Ansh Singh Sonkhia",
  "dependencies": [
    "react",
    "motion"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "content": "'use client';\r\n \r\nimport * as React from 'react';\r\nimport {\r\n  motion,\r\n  type Variants,\r\n  type TargetAndTransition,\r\n  type HTMLMotionProps,\r\n  useInView,\r\n  type UseInViewOptions,\r\n} from 'motion/react';\r\n \r\ntype DefaultSplittingTextProps = {\r\n  motionVariants?: {\r\n    initial?: Record<string, any>;\r\n    animate?: Record<string, any>;\r\n    transition?: Record<string, any>;\r\n    stagger?: number;\r\n  };\r\n  inView?: boolean;\r\n  inViewMargin?: UseInViewOptions['margin'];\r\n  inViewOnce?: boolean;\r\n  delay?: number;\r\n} & HTMLMotionProps<'div'>;\r\n \r\ntype CharsOrWordsSplittingTextProps = DefaultSplittingTextProps & {\r\n  type?: 'chars' | 'words';\r\n  text: string;\r\n};\r\n \r\ntype LinesSplittingTextProps = DefaultSplittingTextProps & {\r\n  type: 'lines';\r\n  text: string[];\r\n};\r\n \r\ntype SplittingTextProps =\r\n  | CharsOrWordsSplittingTextProps\r\n  | LinesSplittingTextProps;\r\n \r\nconst defaultItemVariant: Variants = {\r\n  hidden: { x: 150, opacity: 0 },\r\n  visible: {\r\n    x: 0,\r\n    opacity: 1,\r\n    transition: { duration: 0.7, ease: 'easeOut' },\r\n  },\r\n};\r\n \r\nexport const SplittingText: React.FC<SplittingTextProps> = ({\r\n  ref,\r\n  text,\r\n  type = 'chars',\r\n  motionVariants = {},\r\n  inView = false,\r\n  inViewMargin = '0px',\r\n  inViewOnce = true,\r\n  delay = 0,\r\n  ...props\r\n}) => {\r\n  const items = React.useMemo<React.ReactNode[]>(() => {\r\n    if (Array.isArray(text)) {\r\n      return text.flatMap((line, i) => [\r\n        <React.Fragment key={`line-${i}`}>{line}</React.Fragment>,\r\n        i < text.length - 1 ? <br key={`br-${i}`} /> : null,\r\n      ]);\r\n    }\r\n \r\n    if (type === 'words') {\r\n      const tokens = text.match(/\\S+\\s*/g) || [];\r\n      return tokens.map((token, i) => (\r\n        <React.Fragment key={i}>{token}</React.Fragment>\r\n      ));\r\n    }\r\n \r\n    return text\r\n      .split('')\r\n      .map((char, i) => <React.Fragment key={i}>{char}</React.Fragment>);\r\n  }, [text, type]);\r\n \r\n  const containerVariants: Variants = {\r\n    hidden: {},\r\n    visible: {\r\n      transition: {\r\n        delayChildren: delay / 1000,\r\n        staggerChildren:\r\n          motionVariants.stagger ??\r\n          (type === 'chars' ? 0.05 : type === 'words' ? 0.2 : 0.3),\r\n      },\r\n    },\r\n  };\r\n \r\n  const itemVariants: Variants = {\r\n    hidden: {\r\n      ...defaultItemVariant.hidden,\r\n      ...(motionVariants.initial || {}),\r\n    },\r\n    visible: {\r\n      ...defaultItemVariant.visible,\r\n      ...(motionVariants.animate || {}),\r\n      transition: {\r\n        ...((defaultItemVariant.visible as TargetAndTransition).transition ||\r\n          {}),\r\n        ...(motionVariants.transition || {}),\r\n      },\r\n    },\r\n  };\r\n \r\n  const localRef = React.useRef<HTMLDivElement>(null);\r\n  React.useImperativeHandle(ref, () => localRef.current as HTMLDivElement);\r\n \r\n  const inViewResult = useInView(localRef, {\r\n    once: inViewOnce,\r\n    margin: inViewMargin,\r\n  });\r\n  const isInView = !inView || inViewResult;\r\n \r\n  return (\r\n    <motion.span\r\n      ref={localRef}\r\n      initial=\"hidden\"\r\n      animate={isInView ? 'visible' : 'hidden'}\r\n      variants={containerVariants}\r\n      {...props}\r\n    >\r\n      {items.map(\r\n        (item, index) =>\r\n          item && (\r\n            <React.Fragment key={index}>\r\n              <motion.span\r\n                key={index}\r\n                variants={itemVariants}\r\n                style={{\r\n                  display: 'inline-block',\r\n                  whiteSpace:\r\n                    type === 'chars'\r\n                      ? 'pre'\r\n                      : Array.isArray(text)\r\n                        ? 'normal'\r\n                        : 'normal',\r\n                }}\r\n              >\r\n                {item}\r\n              </motion.span>\r\n              {type === 'words' && ' '}\r\n            </React.Fragment>\r\n          ),\r\n      )}\r\n    </motion.span>\r\n  );\r\n};",
      "path": "components/pumki-ui/text/text-splitting.tsx",
      "target": "components/pumki-ui/text/text-splitting.tsx"
    }
  ]
}