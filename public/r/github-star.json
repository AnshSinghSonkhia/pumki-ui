{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "github-star",
  "type": "registry:ui",
  "title": "GitHub Star Button",
  "description": "An animated button that shows the number of stars a GitHub repository has.",
  "author": "Ansh Singh Sonkhia",
  "dependencies": [
    "react",
    "motion",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://pumki-ui.vercel.app/r/sliding-number.json"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "'use client';\r\n \r\nimport * as React from 'react';\r\nimport { Star } from 'lucide-react';\r\nimport {\r\n  motion,\r\n  AnimatePresence,\r\n  useMotionValue,\r\n  useSpring,\r\n  useInView,\r\n  type HTMLMotionProps,\r\n  type SpringOptions,\r\n  type UseInViewOptions,\r\n} from 'motion/react';\r\n \r\nimport { cn } from '@/lib/utils';\r\nimport { SlidingNumber } from '@/components/pumki-ui/text/sliding-number';\r\n \r\ntype FormatNumberResult = { number: string[]; unit: string };\r\n \r\nfunction formatNumber(num: number, formatted: boolean): FormatNumberResult {\r\n  if (formatted) {\r\n    if (num < 1000) {\r\n      return { number: [num.toString()], unit: '' };\r\n    }\r\n    const units = ['k', 'M', 'B', 'T'];\r\n    let unitIndex = 0;\r\n    let n = num;\r\n    while (n >= 1000 && unitIndex < units.length) {\r\n      n /= 1000;\r\n      unitIndex++;\r\n    }\r\n    const finalNumber = Math.floor(n).toString();\r\n    return { number: [finalNumber], unit: units[unitIndex - 1] ?? '' };\r\n  } else {\r\n    return { number: num.toLocaleString('en-US').split(','), unit: '' };\r\n  }\r\n}\r\n \r\ntype GitHubStarsButtonProps = HTMLMotionProps<'a'> & {\r\n  username: string;\r\n  repo: string;\r\n  transition?: SpringOptions;\r\n  formatted?: boolean;\r\n  inView?: boolean;\r\n  inViewMargin?: UseInViewOptions['margin'];\r\n  inViewOnce?: boolean;\r\n  /**\r\n   * Show a tooltip on hover (default: true)\r\n   */\r\n  tooltip?: boolean;\r\n};\r\n \r\nfunction GitHubStarsButton({\r\n  ref,\r\n  username,\r\n  repo,\r\n  transition = { stiffness: 90, damping: 50 },\r\n  formatted = false,\r\n  inView = false,\r\n  inViewOnce = true,\r\n  inViewMargin = '0px',\r\n  className,\r\n  tooltip = false,\r\n  ...props\r\n}: GitHubStarsButtonProps) {\r\n  const motionVal = useMotionValue(0);\r\n  const springVal = useSpring(motionVal, transition);\r\n  const motionNumberRef = React.useRef(0);\r\n  const isCompletedRef = React.useRef(false);\r\n  const [, forceRender] = React.useReducer((x) => x + 1, 0);\r\n  const [stars, setStars] = React.useState(0);\r\n  const [isCompleted, setIsCompleted] = React.useState(false);\r\n  const [displayParticles, setDisplayParticles] = React.useState(false);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n \r\n  const repoUrl = React.useMemo(\r\n    () => `https://github.com/${username}/${repo}`,\r\n    [username, repo],\r\n  );\r\n \r\n  React.useEffect(() => {\r\n    fetch(`https://api.github.com/repos/${username}/${repo}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data && typeof data.stargazers_count === 'number') {\r\n          setStars(data.stargazers_count);\r\n        }\r\n      })\r\n      .catch(console.error)\r\n      .finally(() => setIsLoading(false));\r\n  }, [username, repo]);\r\n \r\n  const handleDisplayParticles = React.useCallback(() => {\r\n    setDisplayParticles(true);\r\n    setTimeout(() => setDisplayParticles(false), 1500);\r\n  }, []);\r\n \r\n  const localRef = React.useRef<HTMLAnchorElement>(null);\r\n  React.useImperativeHandle(ref, () => localRef.current as HTMLAnchorElement);\r\n \r\n  const inViewResult = useInView(localRef, {\r\n    once: inViewOnce,\r\n    margin: inViewMargin,\r\n  });\r\n  const isComponentInView = !inView || inViewResult;\r\n \r\n  React.useEffect(() => {\r\n    const unsubscribe = springVal.on('change', (latest: number) => {\r\n      const newValue = Math.round(latest);\r\n      if (motionNumberRef.current !== newValue) {\r\n        motionNumberRef.current = newValue;\r\n        forceRender();\r\n      }\r\n      if (stars !== 0 && newValue >= stars && !isCompletedRef.current) {\r\n        isCompletedRef.current = true;\r\n        setIsCompleted(true);\r\n        handleDisplayParticles();\r\n      }\r\n    });\r\n    return () => unsubscribe();\r\n  }, [springVal, stars, handleDisplayParticles]);\r\n \r\n  React.useEffect(() => {\r\n    if (stars > 0 && isComponentInView) motionVal.set(stars);\r\n  }, [motionVal, stars, isComponentInView]);\r\n \r\n  const fillPercentage = Math.min(100, (motionNumberRef.current / stars) * 100);\r\n  const formattedResult = formatNumber(motionNumberRef.current, formatted);\r\n  const ghostFormattedNumber = formatNumber(stars, formatted);\r\n \r\n  const renderNumberSegments = (\r\n    segments: string[],\r\n    unit: string,\r\n    isGhost: boolean,\r\n  ) => (\r\n    <span\r\n      className={cn(\r\n        'flex items-center gap-px',\r\n        isGhost ? 'invisible' : 'absolute top-0 left-0',\r\n      )}\r\n    >\r\n      {segments.map((segment, index) => (\r\n        <React.Fragment key={index}>\r\n          {Array.from(segment).map((digit, digitIndex) => (\r\n            <SlidingNumber key={`${index}-${digitIndex}`} number={+digit} />\r\n          ))}\r\n        </React.Fragment>\r\n      ))}\r\n \r\n      {formatted && unit && <span className=\"leading-[1]\">{unit}</span>}\r\n    </span>\r\n  );\r\n \r\n  const handleClick = React.useCallback(\r\n    (e: React.MouseEvent<HTMLAnchorElement>) => {\r\n      e.preventDefault();\r\n      handleDisplayParticles();\r\n      setTimeout(() => window.open(repoUrl, '_blank'), 500);\r\n    },\r\n    [handleDisplayParticles, repoUrl],\r\n  );\r\n \r\n\r\n  if (isLoading) return null;\r\n \r\n  // Tooltip wrapper\r\n  const Tooltip = ({ children }: { children: React.ReactNode }) =>\r\n    tooltip ? (\r\n      <span className=\"relative group\">\r\n        {children}\r\n        <span className=\"pointer-events-none absolute left-1/2 top-full z-10 mt-2 w-max -translate-x-1/2 scale-95 rounded bg-black/90 px-2 py-1 text-xs text-white opacity-0 group-hover:opacity-100 group-hover:scale-100 transition-all duration-200 whitespace-nowrap shadow-lg\">\r\n          {repoUrl}\r\n        </span>\r\n      </span>\r\n    ) : (\r\n      <>{children}</>\r\n    );\r\n\r\n  return (\r\n    <Tooltip>\r\n      <motion.a\r\n        ref={localRef}\r\n        href={repoUrl}\r\n        rel=\"noopener noreferrer\"\r\n        target=\"_blank\"\r\n        whileTap={{ scale: 0.95 }}\r\n        whileHover={{ scale: 1.05 }}\r\n        onClick={handleClick}\r\n        className={cn(\r\n          \"flex items-center gap-2 text-sm bg-primary text-primary-foreground rounded-lg px-4 py-2 h-10 has-[>svg]:px-3 cursor-pointer whitespace-nowrap font-medium transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-[18px] shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        <svg role=\"img\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n          <path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" />\r\n        </svg>\r\n        <span>GitHub Stars</span>\r\n        <div className=\"relative inline-flex size-[18px] shrink-0\">\r\n          <Star\r\n            className=\"fill-muted-foreground text-muted-foreground\"\r\n            size={18}\r\n            aria-hidden=\"true\"\r\n          />\r\n          <Star\r\n            className=\"absolute top-0 left-0 text-yellow-500 fill-yellow-500\"\r\n            aria-hidden=\"true\"\r\n            style={{\r\n              clipPath: `inset(${100 - (isCompleted ? fillPercentage : fillPercentage - 10)}% 0 0 0)`,\r\n            }}\r\n          />\r\n          <AnimatePresence>\r\n            {displayParticles && (\r\n              <>\r\n                <motion.div\r\n                  className=\"absolute inset-0 rounded-full\"\r\n                  style={{\r\n                    background:\r\n                      'radial-gradient(circle, rgba(255,215,0,0.4) 0%, rgba(255,215,0,0) 70%)',\r\n                  }}\r\n                  initial={{ scale: 1.2, opacity: 0 }}\r\n                  animate={{ scale: [1.2, 1.8, 1.2], opacity: [0, 0.3, 0] }}\r\n                  transition={{ duration: 1.2, ease: 'easeInOut' }}\r\n                />\r\n                <motion.div\r\n                  className=\"absolute inset-0 rounded-full\"\r\n                  style={{ boxShadow: '0 0 10px 2px rgba(255,215,0,0.6)' }}\r\n                  initial={{ scale: 1, opacity: 0 }}\r\n                  animate={{ scale: [1, 1.5], opacity: [0.8, 0] }}\r\n                  transition={{ duration: 0.8, ease: 'easeOut' }}\r\n                />\r\n                {[...Array(6)].map((_, i) => (\r\n                  <motion.div\r\n                    key={i}\r\n                    className=\"absolute w-1 h-1 rounded-full bg-yellow-500\"\r\n                    initial={{ x: '50%', y: '50%', scale: 0, opacity: 0 }}\r\n                    animate={{\r\n                      x: `calc(50% + ${Math.cos((i * Math.PI) / 3) * 30}px)`,\r\n                      y: `calc(50% + ${Math.sin((i * Math.PI) / 3) * 30}px)`,\r\n                      scale: [0, 1, 0],\r\n                      opacity: [0, 1, 0],\r\n                    }}\r\n                    transition={{\r\n                      duration: 0.8,\r\n                      delay: i * 0.05,\r\n                      ease: 'easeOut',\r\n                    }}\r\n                  />\r\n                ))}\r\n              </>\r\n            )}\r\n          </AnimatePresence>\r\n        </div>\r\n        <span className=\"relative inline-flex\">\r\n          {renderNumberSegments(\r\n            ghostFormattedNumber.number,\r\n            ghostFormattedNumber.unit,\r\n            true,\r\n          )}\r\n          {renderNumberSegments(\r\n            formattedResult.number,\r\n            formattedResult.unit,\r\n            false,\r\n          )}\r\n        </span>\r\n      </motion.a>\r\n    </Tooltip>\r\n  );\r\n}\r\n \r\nexport { GitHubStarsButton, type GitHubStarsButtonProps };",
      "path": "components/pumki-ui/buttons/github-star.tsx",
      "target": "components/pumki-ui/buttons/github-star.tsx"
    }
  ]
}