{
  "name": "bg-fireworks",
  "type": "registry:component",
  "title": "Fireworks Animation",
  "description": "A vibrant fireworks animation background component for celebrations and special occasions, with colorful bursts and effects.",
  "author": "Ansh Singh Sonkhia <anshssonkhia@gmail.com>",
  "dependencies": [
    "react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "'use client';\r\n \r\nimport * as React from 'react';\r\n \r\nimport { cn } from '@/lib/utils';\r\n \r\nconst rand = (min: number, max: number): number =>\r\n  Math.random() * (max - min) + min;\r\n \r\nconst randInt = (min: number, max: number): number =>\r\n  Math.floor(Math.random() * (max - min) + min);\r\n \r\nconst randColor = (): string => `hsl(${randInt(0, 360)}, 100%, 50%)`;\r\n \r\ntype ParticleType = {\r\n  x: number;\r\n  y: number;\r\n  color: string;\r\n  speed: number;\r\n  direction: number;\r\n  vx: number;\r\n  vy: number;\r\n  gravity: number;\r\n  friction: number;\r\n  alpha: number;\r\n  decay: number;\r\n  size: number;\r\n  update: () => void;\r\n  draw: (ctx: CanvasRenderingContext2D) => void;\r\n  isAlive: () => boolean;\r\n};\r\n \r\nfunction createParticle(\r\n  x: number,\r\n  y: number,\r\n  color: string,\r\n  speed: number,\r\n  direction: number,\r\n  gravity: number,\r\n  friction: number,\r\n  size: number,\r\n): ParticleType {\r\n  const vx = Math.cos(direction) * speed;\r\n  const vy = Math.sin(direction) * speed;\r\n  const alpha = 1;\r\n  const decay = rand(0.005, 0.02);\r\n \r\n  return {\r\n    x,\r\n    y,\r\n    color,\r\n    speed,\r\n    direction,\r\n    vx,\r\n    vy,\r\n    gravity,\r\n    friction,\r\n    alpha,\r\n    decay,\r\n    size,\r\n    update() {\r\n      this.vx *= this.friction;\r\n      this.vy *= this.friction;\r\n      this.vy += this.gravity;\r\n      this.x += this.vx;\r\n      this.y += this.vy;\r\n      this.alpha -= this.decay;\r\n    },\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n      ctx.save();\r\n      ctx.globalAlpha = this.alpha;\r\n      ctx.beginPath();\r\n      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\r\n      ctx.fillStyle = this.color;\r\n      ctx.fill();\r\n      ctx.restore();\r\n    },\r\n    isAlive() {\r\n      return this.alpha > 0;\r\n    },\r\n  };\r\n}\r\n \r\ntype FireworkType = {\r\n  x: number;\r\n  y: number;\r\n  targetY: number;\r\n  color: string;\r\n  speed: number;\r\n  size: number;\r\n  angle: number;\r\n  vx: number;\r\n  vy: number;\r\n  trail: { x: number; y: number }[];\r\n  trailLength: number;\r\n  exploded: boolean;\r\n  update: () => boolean;\r\n  explode: () => void;\r\n  draw: (ctx: CanvasRenderingContext2D) => void;\r\n};\r\n \r\nfunction createFirework(\r\n  x: number,\r\n  y: number,\r\n  targetY: number,\r\n  color: string,\r\n  speed: number,\r\n  size: number,\r\n  particleSpeed: { min: number; max: number } | number,\r\n  particleSize: { min: number; max: number } | number,\r\n  onExplode: (particles: ParticleType[]) => void,\r\n): FireworkType {\r\n  const angle = -Math.PI / 2 + rand(-0.3, 0.3);\r\n  const vx = Math.cos(angle) * speed;\r\n  const vy = Math.sin(angle) * speed;\r\n  const trail: { x: number; y: number }[] = [];\r\n  const trailLength = randInt(10, 25);\r\n \r\n  return {\r\n    x,\r\n    y,\r\n    targetY,\r\n    color,\r\n    speed,\r\n    size,\r\n    angle,\r\n    vx,\r\n    vy,\r\n    trail,\r\n    trailLength,\r\n    exploded: false,\r\n    update() {\r\n      this.trail.push({ x: this.x, y: this.y });\r\n      if (this.trail.length > this.trailLength) {\r\n        this.trail.shift();\r\n      }\r\n      this.x += this.vx;\r\n      this.y += this.vy;\r\n      this.vy += 0.02;\r\n      if (this.vy >= 0 || this.y <= this.targetY) {\r\n        this.explode();\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    explode() {\r\n      const numParticles = randInt(50, 150);\r\n      const particles: ParticleType[] = [];\r\n      for (let i = 0; i < numParticles; i++) {\r\n        const particleAngle = rand(0, Math.PI * 2);\r\n        const localParticleSpeed = getValueByRange(particleSpeed);\r\n        const localParticleSize = getValueByRange(particleSize);\r\n        particles.push(\r\n          createParticle(\r\n            this.x,\r\n            this.y,\r\n            this.color,\r\n            localParticleSpeed,\r\n            particleAngle,\r\n            0.05,\r\n            0.98,\r\n            localParticleSize,\r\n          ),\r\n        );\r\n      }\r\n      onExplode(particles);\r\n    },\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n      ctx.save();\r\n      ctx.beginPath();\r\n      if (this.trail.length > 1) {\r\n        ctx.moveTo(this.trail[0]?.x ?? this.x, this.trail[0]?.y ?? this.y);\r\n        for (const point of this.trail) {\r\n          ctx.lineTo(point.x, point.y);\r\n        }\r\n      } else {\r\n        ctx.moveTo(this.x, this.y);\r\n        ctx.lineTo(this.x, this.y);\r\n      }\r\n      ctx.strokeStyle = this.color;\r\n      ctx.lineWidth = this.size;\r\n      ctx.lineCap = 'round';\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    },\r\n  };\r\n}\r\n \r\nfunction getValueByRange(range: { min: number; max: number } | number): number {\r\n  if (typeof range === 'number') {\r\n    return range;\r\n  }\r\n  return rand(range.min, range.max);\r\n}\r\n \r\nfunction getColor(color: string | string[] | undefined): string {\r\n  if (Array.isArray(color)) {\r\n    return color[randInt(0, color.length)] ?? randColor();\r\n  }\r\n  return color ?? randColor();\r\n}\r\n \r\ntype FireworksBackgroundProps = Omit<React.ComponentProps<'div'>, 'color'> & {\r\n  canvasProps?: React.ComponentProps<'canvas'>;\r\n  population?: number;\r\n  color?: string | string[];\r\n  fireworkSpeed?: { min: number; max: number } | number;\r\n  fireworkSize?: { min: number; max: number } | number;\r\n  particleSpeed?: { min: number; max: number } | number;\r\n  particleSize?: { min: number; max: number } | number;\r\n};\r\n \r\nfunction FireworksBackground({\r\n  ref,\r\n  className,\r\n  canvasProps,\r\n  population = 1,\r\n  color,\r\n  fireworkSpeed = { min: 4, max: 8 },\r\n  fireworkSize = { min: 2, max: 5 },\r\n  particleSpeed = { min: 2, max: 7 },\r\n  particleSize = { min: 1, max: 5 },\r\n  ...props\r\n}: FireworksBackgroundProps) {\r\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\r\n  const containerRef = React.useRef<HTMLDivElement>(null);\r\n  React.useImperativeHandle(ref, () => containerRef.current as HTMLDivElement);\r\n \r\n  React.useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const container = containerRef.current;\r\n    if (!canvas || !container) return;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n \r\n    let maxX = window.innerWidth;\r\n    let ratio = container.offsetHeight / container.offsetWidth;\r\n    let maxY = maxX * ratio;\r\n    canvas.width = maxX;\r\n    canvas.height = maxY;\r\n \r\n    const setCanvasSize = () => {\r\n      maxX = window.innerWidth;\r\n      ratio = container.offsetHeight / container.offsetWidth;\r\n      maxY = maxX * ratio;\r\n      canvas.width = maxX;\r\n      canvas.height = maxY;\r\n    };\r\n    window.addEventListener('resize', setCanvasSize);\r\n \r\n    const explosions: ParticleType[] = [];\r\n    const fireworks: FireworkType[] = [];\r\n \r\n    const handleExplosion = (particles: ParticleType[]) => {\r\n      explosions.push(...particles);\r\n    };\r\n \r\n    const launchFirework = () => {\r\n      const x = rand(maxX * 0.1, maxX * 0.9);\r\n      const y = maxY;\r\n      const targetY = rand(maxY * 0.1, maxY * 0.4);\r\n      const fireworkColor = getColor(color);\r\n      const speed = getValueByRange(fireworkSpeed);\r\n      const size = getValueByRange(fireworkSize);\r\n      fireworks.push(\r\n        createFirework(\r\n          x,\r\n          y,\r\n          targetY,\r\n          fireworkColor,\r\n          speed,\r\n          size,\r\n          particleSpeed,\r\n          particleSize,\r\n          handleExplosion,\r\n        ),\r\n      );\r\n      const timeout = rand(300, 800) / population;\r\n      setTimeout(launchFirework, timeout);\r\n    };\r\n \r\n    launchFirework();\r\n \r\n    let animationFrameId: number;\r\n    const animate = () => {\r\n      ctx.clearRect(0, 0, maxX, maxY);\r\n \r\n      for (let i = fireworks.length - 1; i >= 0; i--) {\r\n        const firework = fireworks[i];\r\n        if (!firework?.update()) {\r\n          fireworks.splice(i, 1);\r\n        } else {\r\n          firework.draw(ctx);\r\n        }\r\n      }\r\n \r\n      for (let i = explosions.length - 1; i >= 0; i--) {\r\n        const particle = explosions[i];\r\n        particle?.update();\r\n        if (particle?.isAlive()) {\r\n          particle.draw(ctx);\r\n        } else {\r\n          explosions.splice(i, 1);\r\n        }\r\n      }\r\n \r\n      animationFrameId = requestAnimationFrame(animate);\r\n    };\r\n \r\n    animate();\r\n \r\n    const handleClick = (event: MouseEvent) => {\r\n      const x = event.clientX;\r\n      const y = maxY;\r\n      const targetY = event.clientY;\r\n      const fireworkColor = getColor(color);\r\n      const speed = getValueByRange(fireworkSpeed);\r\n      const size = getValueByRange(fireworkSize);\r\n      fireworks.push(\r\n        createFirework(\r\n          x,\r\n          y,\r\n          targetY,\r\n          fireworkColor,\r\n          speed,\r\n          size,\r\n          particleSpeed,\r\n          particleSize,\r\n          handleExplosion,\r\n        ),\r\n      );\r\n    };\r\n \r\n    container.addEventListener('click', handleClick);\r\n \r\n    return () => {\r\n      window.removeEventListener('resize', setCanvasSize);\r\n      container.removeEventListener('click', handleClick);\r\n      cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [\r\n    population,\r\n    color,\r\n    fireworkSpeed,\r\n    fireworkSize,\r\n    particleSpeed,\r\n    particleSize,\r\n  ]);\r\n \r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      data-slot=\"fireworks-background\"\r\n      className={cn('relative size-full overflow-hidden', className)}\r\n      {...props}\r\n    >\r\n      <canvas\r\n        {...canvasProps}\r\n        ref={canvasRef}\r\n        className={cn('absolute inset-0 size-full', canvasProps?.className)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n \r\nexport { FireworksBackground, type FireworksBackgroundProps };",
      "path": "/components/pumki-ui/backgrounds/fireworks.tsx",
      "target": "components/pumki-ui/backgrounds/fireworks.tsx"
    }
  ]
}