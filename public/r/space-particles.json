{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "space-particles",
  "type": "registry:ui",
  "title": "Space Particles",
  "description": "A component that renders a Dynamic 3D field of particles in space.",
  "author": "Ansh Singh Sonkhia",
  "dependencies": [
    "react",
    "three",
    "@types/three"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\ninterface ParticlesProps {\r\n  color?: string;\r\n  particleCount?: number;\r\n  particleSize?: number;\r\n  animate?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport function Particles({\r\n  color = \"#ff3366\",\r\n  particleCount = 10000,\r\n  particleSize = 35,\r\n  animate = true,\r\n  className = \"\",\r\n}: ParticlesProps) {\r\n  const mountRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const container = mountRef.current;\r\n    if (!container) return;\r\n\r\n    let camera: THREE.PerspectiveCamera;\r\n    let scene: THREE.Scene;\r\n    let material: THREE.PointsMaterial;\r\n    let animationFrameId: number;\r\n    let mouseX = 0;\r\n    let mouseY = 0;\r\n\r\n    const init = () => {\r\n      camera = new THREE.PerspectiveCamera(\r\n        55,\r\n        window.innerWidth / window.innerHeight,\r\n        2,\r\n        2000\r\n      );\r\n      camera.position.z = 1000;\r\n\r\n      scene = new THREE.Scene();\r\n      scene.fog = new THREE.FogExp2(0x000000, 0.001);\r\n\r\n      const geometry = new THREE.BufferGeometry();\r\n      const vertices: number[] = [];\r\n\r\n      for (let i = 0; i < particleCount; i++) {\r\n        vertices.push(\r\n          2000 * Math.random() - 1000,\r\n          2000 * Math.random() - 1000,\r\n          2000 * Math.random() - 1000\r\n        );\r\n      }\r\n\r\n      geometry.setAttribute(\r\n        \"position\",\r\n        new THREE.Float32BufferAttribute(vertices, 3)\r\n      );\r\n\r\n      const sprite = new THREE.TextureLoader().load(\"/assets/particle.png\");\r\n      material = new THREE.PointsMaterial({\r\n        size: particleSize,\r\n        sizeAttenuation: true,\r\n        map: sprite,\r\n        alphaTest: 0.5,\r\n        transparent: true,\r\n      });\r\n      material.color.setStyle(color);\r\n\r\n      const particles = new THREE.Points(geometry, material);\r\n      scene.add(particles);\r\n\r\n      const renderer = new THREE.WebGLRenderer({\r\n        antialias: true,\r\n        alpha: true,\r\n      });\r\n      renderer.setPixelRatio(window.devicePixelRatio);\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      container.appendChild(renderer.domElement);\r\n\r\n      return renderer;\r\n    };\r\n\r\n    const handleResize = () => {\r\n      if (!camera || !renderer) return;\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n\r\n    const handlePointerMove = (event: PointerEvent) => {\r\n      if (event.isPrimary) {\r\n        mouseX = event.clientX - window.innerWidth / 2;\r\n        mouseY = event.clientY - window.innerHeight / 2;\r\n      }\r\n    };\r\n\r\n    const animateScene = () => {\r\n      if (!camera || !scene || !renderer || !material) return;\r\n\r\n      if (animate) {\r\n        const time = Date.now() * 0.00005;\r\n        const h = ((360 * (1.0 + time)) % 360) / 360;\r\n        material.color.setHSL(h, 0.5, 0.5);\r\n      }\r\n\r\n      camera.position.x += (mouseX - camera.position.x) * 0.05;\r\n      camera.position.y += (-mouseY - camera.position.y) * 0.05;\r\n      camera.lookAt(scene.position);\r\n\r\n      renderer.render(scene, camera);\r\n      animationFrameId = requestAnimationFrame(animateScene);\r\n    };\r\n\r\n    const renderer = init();\r\n    window.addEventListener(\"resize\", handleResize);\r\n    window.addEventListener(\"pointermove\", handlePointerMove);\r\n    animateScene();\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      window.removeEventListener(\"pointermove\", handlePointerMove);\r\n      cancelAnimationFrame(animationFrameId);\r\n\r\n      if (renderer) {\r\n        renderer.dispose();\r\n        container.removeChild(renderer.domElement);\r\n      }\r\n\r\n      if (material) material.dispose();\r\n    };\r\n  }, [color, particleCount, particleSize, animate]);\r\n\r\n  return (\r\n    <div\r\n      ref={mountRef}\r\n      className={`absolute top-0 left-0 w-full h-full pointer-events-none ${className}`}\r\n    />\r\n  );\r\n}\r\n",
      "path": "components/pumki-ui/animations/space-particles.tsx",
      "target": "components/pumki-ui/animations/space-particles.tsx"
    }
  ]
}