{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stats-carousel",
  "type": "registry:ui",
  "title": "Stats Carousel",
  "description": "A smooth carousel effect for displaying statistics, perfect for dashboards and data visualization.",
  "author": "Ansh Singh Sonkhia",
  "dependencies": [
    "react",
    "motion",
    "framer-motion"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\r\n\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { motion, useMotionValue, useSpring, useTransform } from \"framer-motion\";\r\n\r\ninterface StatItem {\r\n  id?: number;\r\n  value: number;\r\n  suffix?: string;\r\n  label: string;\r\n}\r\n\r\nfunction StatsCarousel({\r\n  value,\r\n  suffix,\r\n  trigger,\r\n  onDone,\r\n}: {\r\n  value: number;\r\n  suffix?: string;\r\n  trigger: number;\r\n  onDone: () => void;\r\n}) {\r\n  const motionValue = useMotionValue(0);\r\n  const springValue = useSpring(motionValue, {\r\n    damping: 20,\r\n    stiffness: 50,\r\n    mass: 1,\r\n  });\r\n  const rounded = useTransform(springValue, (latest) =>\r\n    Number(latest.toFixed(value % 1 === 0 ? 0 : 1))\r\n  );\r\n  const [displayValue, setDisplayValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    motionValue.set(0);\r\n    const unsub = rounded.on(\"change\", (v) => {\r\n      setDisplayValue(v);\r\n      if (v >= value) onDone?.();\r\n    });\r\n    const timeout = setTimeout(() => {\r\n      motionValue.set(value);\r\n    }, 100);\r\n    return () => {\r\n      unsub();\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [trigger, value, motionValue, rounded, onDone]);\r\n\r\n  return (\r\n    <div className=\"text-5xl font-extrabold text-white dark:text-black\">\r\n      {displayValue}\r\n      {suffix}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function StatsCarouselcount({\r\n  stats,\r\n  title,\r\n  className = \"\",\r\n  cardClassName = \"\",\r\n}: {\r\n  stats?: StatItem[];\r\n  title?: string;\r\n  className?: string;\r\n  cardClassName?: string;\r\n}) {\r\n  const defaultStats: StatItem[] = [\r\n    { value: 50, suffix: \"+\", label: \"Components\" },\r\n    { value: 12, suffix: \"K+\", label: \"Developers\" },\r\n    { value: 99, suffix: \"%\", label: \"Performance\" },\r\n  ];\r\n\r\n  const initialStats = (stats ?? defaultStats).map((s, i) => ({\r\n    ...s,\r\n    id: i + 1,\r\n  }));\r\n  const [items, setItems] = useState(initialStats);\r\n  const [phase, setPhase] = useState<\"idle\" | \"down\" | \"stackUp\" | \"upReenter\">(\r\n    \"idle\"\r\n  );\r\n  const [activeTopId, setActiveTopId] = useState(initialStats[0].id!);\r\n  const [triggerCounter, setTriggerCounter] = useState(0);\r\n  const [animatedIds, setAnimatedIds] = useState<Set<number>>(new Set());\r\n  const [resetQueue, setResetQueue] = useState<Set<number>>(new Set());\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (phase === \"idle\")\r\n      timeoutRef.current = setTimeout(() => setPhase(\"down\"), 3000);\r\n    if (phase === \"down\")\r\n      timeoutRef.current = setTimeout(() => setPhase(\"stackUp\"), 600);\r\n    if (phase === \"stackUp\")\r\n      timeoutRef.current = setTimeout(() => setPhase(\"upReenter\"), 600);\r\n    if (phase === \"upReenter\") {\r\n      timeoutRef.current = setTimeout(() => {\r\n        setItems((prev) => {\r\n          const [first, ...rest] = prev;\r\n          const newTopId = rest[0].id!;\r\n\r\n          setResetQueue((r) => {\r\n            const newSet = new Set(r);\r\n            newSet.add(first.id!);\r\n            return newSet;\r\n          });\r\n\r\n          setAnimatedIds((prev) => {\r\n            const copy = new Set(prev);\r\n            copy.delete(first.id!);\r\n            return copy;\r\n          });\r\n\r\n          setActiveTopId(newTopId);\r\n          setTriggerCounter((t) => t + 1);\r\n\r\n          return [...rest, first];\r\n        });\r\n\r\n        setPhase(\"idle\");\r\n      }, 600);\r\n    }\r\n\r\n    return () => {\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n    };\r\n  }, [phase]);\r\n\r\n  return (\r\n    <section\r\n      className={`py-20 px-4 w-full max-w-md mx-auto text-center relative h-[500px] z-[40] ${className}`}\r\n    >\r\n      <h2 className=\"text-lg font-bold text-black dark:text-white mb-12\">\r\n        {title ?? \"CREATE STUNNING INTERFACES WITH SCROLLX UI COMPONENTS\"}\r\n      </h2>\r\n      <div className=\"relative h-[300px]\">\r\n        {items.map((stat, index) => {\r\n          const baseY = index * 20;\r\n          const scale = 1 - index * 0.05;\r\n          const isTopCard = index === 0;\r\n          const bottomIndex = items.length - 1;\r\n          const bottomScale = 1 - bottomIndex * 0.05;\r\n\r\n          let animate = { x: 0, y: baseY, scale };\r\n          if (isTopCard && phase === \"down\")\r\n            animate = { x: 0, y: baseY + 150, scale: 0.8 };\r\n          if (!isTopCard && phase === \"stackUp\")\r\n            animate = { x: 0, y: baseY - 20, scale };\r\n          if (isTopCard && phase === \"stackUp\")\r\n            animate = { x: 0, y: baseY + 150, scale: 0.8 };\r\n          if (isTopCard && phase === \"upReenter\")\r\n            animate = { x: 0, y: bottomIndex * 20, scale: bottomScale };\r\n\r\n          const zIndex =\r\n            phase === \"upReenter\" && isTopCard\r\n              ? 0\r\n              : Math.max(0, Math.min(40, 40 - index));\r\n          const shouldAnimate =\r\n            stat.id === activeTopId &&\r\n            phase === \"idle\" &&\r\n            !animatedIds.has(stat.id!);\r\n          const shouldShowZero =\r\n            resetQueue.has(stat.id!) && stat.id !== activeTopId;\r\n\r\n          return (\r\n            <motion.div\r\n              key={stat.id}\r\n              className=\"absolute left-0 right-0 mx-auto w-full\"\r\n              style={{ zIndex }}\r\n              animate={animate}\r\n              transition={{ duration: 0.6, ease: \"easeInOut\" }}\r\n            >\r\n              <div\r\n                className={`flex flex-col items-center justify-center rounded-xl border border-neutral-800 p-6 bg-neutral-950 dark:border-neutral-200 dark:bg-neutral-50 shadow-lg ${cardClassName}`}\r\n              >\r\n                {shouldAnimate ? (\r\n                  <StatsCarousel\r\n                    value={stat.value}\r\n                    suffix={stat.suffix}\r\n                    trigger={triggerCounter}\r\n                    onDone={() =>\r\n                      setAnimatedIds((prev) => new Set(prev).add(stat.id!))\r\n                    }\r\n                  />\r\n                ) : shouldShowZero ? (\r\n                  <div className=\"text-5xl font-extrabold text-white dark:text-black\">\r\n                    0{stat.suffix}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"text-5xl font-extrabold text-white dark:text-black\">\r\n                    {stat.value}\r\n                    {stat.suffix}\r\n                  </div>\r\n                )}\r\n                <p className=\"text-xs text-neutral-400 dark:text-neutral-800 mt-2 text-center uppercase tracking-wide\">\r\n                  {stat.label}\r\n                </p>\r\n              </div>\r\n            </motion.div>\r\n          );\r\n        })}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n",
      "path": "components/pumki-ui/carousels/stats-carousel.tsx",
      "target": "components/pumki-ui/carousels/stats-carousel.tsx"
    }
  ]
}