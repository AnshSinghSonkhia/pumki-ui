{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-preview",
  "type": "registry:ui",
  "title": "Code Preview Block",
  "description": "A customizable code preview component for displaying code snippets with syntax highlighting.",
  "author": "Ansh Singh Sonkhia",
  "dependencies": [
    "react"
  ],
  "registryDependencies": [
    "https://raw.githubusercontent.com/AnshSinghSonkhia/pumki-ui/main/public/r/codeblock.json"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\"\r\n\r\nimport React from 'react';\r\nimport { cn } from '@/lib/utils';\r\nimport { CodeBlock } from './code-block';\r\n\r\ninterface PreviewProps {\r\n  children: React.ReactNode;\r\n  code: string;\r\n  title?: string;\r\n  description?: string;\r\n  className?: string;\r\n  showCode?: boolean;\r\n  centered?: boolean;\r\n  minHeight?: string;\r\n  previewHeight?: string;\r\n}\r\n\r\nexport const Preview: React.FC<PreviewProps> = ({\r\n  children,\r\n  code,\r\n  title,\r\n  description,\r\n  className,\r\n  showCode = true,\r\n  centered = true,\r\n  minHeight = \"200px\",\r\n  previewHeight,\r\n}) => {\r\n  const [activeTab, setActiveTab] = React.useState<'preview' | 'code'>('preview');\r\n  const [copied, setCopied] = React.useState(false);\r\n\r\n  const copyToClipboard = async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(code);\r\n      setCopied(true);\r\n      setTimeout(() => setCopied(false), 2000);\r\n    } catch (err) {\r\n      console.error('Failed to copy text: ', err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"not-prose my-6\", className)}>\r\n      {/* Header */}\r\n      {(title || description) && (\r\n        <div className=\"mb-4\">\r\n          {title && (\r\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">{title}</h3>\r\n          )}\r\n          {description && (\r\n            <p className=\"text-sm text-muted-foreground\">{description}</p>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"rounded-lg border border-border bg-background overflow-hidden\">\r\n        {/* Tabs */}\r\n        <div className=\"flex items-center justify-between border-b border-border bg-muted/30\">\r\n          <div className=\"flex\">\r\n            <button\r\n              onClick={() => setActiveTab('preview')}\r\n              className={cn(\r\n                \"px-4 py-2 text-sm font-medium transition-colors relative\",\r\n                activeTab === 'preview'\r\n                  ? \"text-foreground bg-background border-b-2 border-primary\"\r\n                  : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"\r\n              )}\r\n            >\r\n              Preview\r\n            </button>\r\n            {showCode && (\r\n              <button\r\n                onClick={() => setActiveTab('code')}\r\n                className={cn(\r\n                  \"px-4 py-2 text-sm font-medium transition-colors relative\",\r\n                  activeTab === 'code'\r\n                    ? \"text-foreground bg-background border-b-2 border-primary\"\r\n                    : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"\r\n                )}\r\n              >\r\n                Code\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          {/* Actions */}\r\n          <div className=\"flex items-center gap-2 px-4\">\r\n            <div className=\"flex items-center gap-1\">\r\n              <img \r\n                src=\"/icon-no-bg.png\" \r\n                alt=\"Pumki UI\" \r\n                className=\"w-4 h-4\"\r\n              />\r\n              <span className=\"text-xs text-muted-foreground font-medium\">Pumki UI</span>\r\n            </div>\r\n            {activeTab === 'code' && (\r\n              <button\r\n                onClick={copyToClipboard}\r\n                className=\"p-1.5 rounded-md hover:bg-background/50 transition-colors text-muted-foreground hover:text-foreground\"\r\n                title=\"Copy to clipboard\"\r\n              >\r\n                {copied ? (\r\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n                  </svg>\r\n                ) : (\r\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\" />\r\n                  </svg>\r\n                )}\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"relative\">\r\n          {activeTab === 'preview' ? (\r\n            <div \r\n              className={cn(\r\n                \"p-6\",\r\n                centered && \"flex items-center justify-center\"\r\n              )}\r\n              style={{ minHeight: previewHeight || minHeight, backgroundColor: '#000' }}\r\n            >\r\n              <div \r\n                className=\"mx-auto aspect-[16/10] w-full max-w-[900px] min-h-[360px] bg-black flex items-center justify-center rounded-lg overflow-hidden\"\r\n                style={{ aspectRatio: '16/10', minHeight: previewHeight }}\r\n              >\r\n                {children}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"bg-muted/50\">\r\n              <CodeBlock \r\n                language=\"tsx\" \r\n                showLineNumbers={true}\r\n                copy={false} // We handle copy in the header\r\n                className=\"border-0 rounded-none bg-transparent\"\r\n              >\r\n                {code}\r\n              </CodeBlock>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Optional: ResponsivePreview for testing different screen sizes\r\nexport const ResponsivePreview: React.FC<PreviewProps & {\r\n  sizes?: Array<{ name: string; width: string; icon?: React.ReactNode }>;\r\n}> = ({ \r\n  children, \r\n  code, \r\n  title, \r\n  description, \r\n  className,\r\n  sizes = [\r\n    { name: 'Mobile', width: '375px' },\r\n    { name: 'Tablet', width: '768px' },\r\n    { name: 'Desktop', width: '100%' },\r\n  ],\r\n  previewHeight,\r\n  minHeight,\r\n  ...props \r\n}) => {\r\n  const [activeSize, setActiveSize] = React.useState(sizes[sizes.length - 1]);\r\n  const [activeTab, setActiveTab] = React.useState<'preview' | 'code'>('preview');\r\n\r\n  return (\r\n    <div className={cn(\"not-prose my-6\", className)}>\r\n      {/* Header */}\r\n      {(title || description) && (\r\n        <div className=\"mb-4\">\r\n          {title && (\r\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">{title}</h3>\r\n          )}\r\n          {description && (\r\n            <p className=\"text-sm text-muted-foreground\">{description}</p>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"rounded-lg border border-border bg-background overflow-hidden\">\r\n        {/* Tabs & Size Controls */}\r\n        <div className=\"flex items-center justify-between border-b border-border bg-muted/30\">\r\n          <div className=\"flex\">\r\n            <button\r\n              onClick={() => setActiveTab('preview')}\r\n              className={cn(\r\n                \"px-4 py-2 text-sm font-medium transition-colors\",\r\n                activeTab === 'preview'\r\n                  ? \"text-foreground bg-background border-b-2 border-primary\"\r\n                  : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"\r\n              )}\r\n            >\r\n              Preview\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('code')}\r\n              className={cn(\r\n                \"px-4 py-2 text-sm font-medium transition-colors\",\r\n                activeTab === 'code'\r\n                  ? \"text-foreground bg-background border-b-2 border-primary\"\r\n                  : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"\r\n              )}\r\n            >\r\n              Code\r\n            </button>\r\n          </div>\r\n\r\n          {/* Size selector for preview mode */}\r\n          {activeTab === 'preview' && (\r\n            <div className=\"flex items-center gap-1\">\r\n              {sizes.map((size) => (\r\n                <button\r\n                  key={size.name}\r\n                  onClick={() => setActiveSize(size)}\r\n                  className={cn(\r\n                    \"px-3 py-1 text-xs font-medium rounded transition-colors\",\r\n                    activeSize.name === size.name\r\n                      ? \"bg-primary text-primary-foreground\"\r\n                      : \"text-muted-foreground hover:text-foreground hover:bg-muted\"\r\n                  )}\r\n                >\r\n                  {size.name}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"relative\">\r\n          {activeTab === 'preview' ? (\r\n            <div className=\"p-6 flex justify-center min-h-[300px]\" style={{ backgroundColor: '#000', minHeight: previewHeight || minHeight }}>\r\n              <div \r\n                className=\"border border-dashed border-border transition-all duration-200 bg-black flex items-center justify-center rounded-lg overflow-hidden\"\r\n                style={{ \r\n                  width: activeSize.width,\r\n                  maxWidth: '100%',\r\n                  aspectRatio: '16/10',\r\n                  minHeight: previewHeight || '360px'\r\n                }}\r\n              >\r\n                <div className=\"w-full h-full flex items-center justify-center\">\r\n                  {children}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"bg-muted/50\">\r\n              <CodeBlock \r\n                language=\"tsx\" \r\n                showLineNumbers={true}\r\n                copy={true}\r\n                className=\"border-0 rounded-none bg-transparent\"\r\n              >\r\n                {code}\r\n              </CodeBlock>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};",
      "path": "components/docs/preview.tsx",
      "target": "components/pumki-ui/preview.tsx"
    }
  ]
}