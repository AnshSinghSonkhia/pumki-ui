{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-ripple",
  "type": "registry:ui",
  "title": "Ripple Button",
  "description": "A button that shows a ripple effect on click.",
  "author": "Ansh Singh Sonkhia",
  "dependencies": [
    "react",
    "motion",
    "class-variance-authority"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "content": "'use client';\r\n \r\nimport * as React from 'react';\r\nimport { type HTMLMotionProps, motion, type Transition } from 'motion/react';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\n \r\nimport { cn } from '@/lib/utils';\r\n \r\nconst buttonVariants = cva(\r\n  \"relative overflow-hidden cursor-pointer inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\r\n        destructive:\r\n          'bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n        outline:\r\n          'border bg-background hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\r\n        secondary:\r\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80',\r\n        ghost:\r\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\r\n      },\r\n      size: {\r\n        default: 'h-10 px-4 py-2 has-[>svg]:px-3',\r\n        sm: 'h-9 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\r\n        lg: 'h-11 px-8 has-[>svg]:px-6',\r\n        icon: 'size-10',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  },\r\n);\r\n \r\nconst rippleVariants = cva('absolute rounded-full size-5 pointer-events-none', {\r\n  variants: {\r\n    variant: {\r\n      default: 'bg-primary-foreground',\r\n      destructive: 'bg-destructive',\r\n      outline: 'bg-input',\r\n      secondary: 'bg-secondary',\r\n      ghost: 'bg-accent',\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: 'default',\r\n  },\r\n});\r\n \r\ntype Ripple = {\r\n  id: number;\r\n  x: number;\r\n  y: number;\r\n};\r\n \r\ntype RippleButtonProps = HTMLMotionProps<'button'> & {\r\n  children: React.ReactNode;\r\n  rippleClassName?: string;\r\n  scale?: number;\r\n  transition?: Transition;\r\n} & VariantProps<typeof buttonVariants>;\r\n \r\nfunction RippleButton({\r\n  ref,\r\n  children,\r\n  onClick,\r\n  className,\r\n  rippleClassName,\r\n  variant,\r\n  size,\r\n  scale = 10,\r\n  transition = { duration: 0.6, ease: 'easeOut' },\r\n  ...props\r\n}: RippleButtonProps) {\r\n  const [ripples, setRipples] = React.useState<Ripple[]>([]);\r\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\r\n  React.useImperativeHandle(ref, () => buttonRef.current as HTMLButtonElement);\r\n \r\n  const createRipple = React.useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => {\r\n      const button = buttonRef.current;\r\n      if (!button) return;\r\n \r\n      const rect = button.getBoundingClientRect();\r\n      const x = event.clientX - rect.left;\r\n      const y = event.clientY - rect.top;\r\n \r\n      const newRipple: Ripple = {\r\n        id: Date.now(),\r\n        x,\r\n        y,\r\n      };\r\n \r\n      setRipples((prev) => [...prev, newRipple]);\r\n \r\n      setTimeout(() => {\r\n        setRipples((prev) => prev.filter((r) => r.id !== newRipple.id));\r\n      }, 600);\r\n    },\r\n    [],\r\n  );\r\n \r\n  const handleClick = React.useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => {\r\n      createRipple(event);\r\n      if (onClick) {\r\n        onClick(event);\r\n      }\r\n    },\r\n    [createRipple, onClick],\r\n  );\r\n \r\n  return (\r\n    <motion.button\r\n      ref={buttonRef}\r\n      data-slot=\"ripple-button\"\r\n      onClick={handleClick}\r\n      whileTap={{ scale: 0.95 }}\r\n      whileHover={{ scale: 1.05 }}\r\n      className={cn(buttonVariants({ variant, size, className }))}\r\n      {...props}\r\n    >\r\n      {children}\r\n      {ripples.map((ripple) => (\r\n        <motion.span\r\n          key={ripple.id}\r\n          initial={{ scale: 0, opacity: 0.5 }}\r\n          animate={{ scale, opacity: 0 }}\r\n          transition={transition}\r\n          className={cn(\r\n            rippleVariants({ variant, className: rippleClassName }),\r\n          )}\r\n          style={{\r\n            top: ripple.y - 10,\r\n            left: ripple.x - 10,\r\n          }}\r\n        />\r\n      ))}\r\n    </motion.button>\r\n  );\r\n}\r\n \r\nexport { RippleButton, type RippleButtonProps };",
      "path": "components/pumki-ui/buttons/ripple.tsx",
      "target": "components/pumki-ui/buttons/ripple.tsx"
    }
  ]
}